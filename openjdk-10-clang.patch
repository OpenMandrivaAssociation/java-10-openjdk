diff -up openjdk/src/hotspot/cpu/arm/icache_arm.cpp.omv~ openjdk/src/hotspot/cpu/arm/icache_arm.cpp
--- openjdk/src/hotspot/cpu/arm/icache_arm.cpp.omv~	2019-01-16 04:01:58.936793836 +0100
+++ openjdk/src/hotspot/cpu/arm/icache_arm.cpp	2019-01-16 04:02:20.081099815 +0100
@@ -67,7 +67,7 @@ static int icache_flush(address addr, in
 #else
 
 static int icache_flush(address addr, int lines, int magic) {
-  __builtin___clear_cache(addr, addr + (lines << ICache::log2_line_size));
+  __builtin___clear_cache(reinterpret_cast<char*>(addr), reinterpret_cast<char*>(addr) + (lines << ICache::log2_line_size));
   return magic;
 }
 
diff -up openjdk/src/hotspot/share/code/compiledIC.cpp.omv~ openjdk/src/hotspot/share/code/compiledIC.cpp
--- openjdk/src/hotspot/share/code/compiledIC.cpp.omv~	2019-01-15 20:45:43.990205590 +0100
+++ openjdk/src/hotspot/share/code/compiledIC.cpp	2019-01-15 20:45:57.843364512 +0100
@@ -224,7 +224,7 @@ bool CompiledIC::set_to_megamorphic(Call
     assert(bytecode == Bytecodes::_invokeinterface, "");
     int itable_index = call_info->itable_index();
     entry = VtableStubs::find_itable_stub(itable_index);
-    if (entry == false) {
+    if (!entry) {
       return false;
     }
 #ifdef ASSERT
diff -up openjdk/test/hotspot/gtest/utilities/test_align.cpp.omv~ openjdk/test/hotspot/gtest/utilities/test_align.cpp
--- openjdk/test/hotspot/gtest/utilities/test_align.cpp.omv~	2019-01-15 22:52:07.295029365 +0100
+++ openjdk/test/hotspot/gtest/utilities/test_align.cpp	2019-01-15 22:52:17.013179971 +0100
@@ -30,7 +30,7 @@
 #include <limits>
 
 // A few arbitrarily chosen values to test the align functions on.
-static uint64_t values[] = {1, 3, 10, 345, 1023, 1024, 1025, 23909034, INT_MAX, uint64_t(-1) / 2, uint64_t(-1) / 2 + 100, -1 };
+static uint64_t values[] = {1, 3, 10, 345, 1023, 1024, 1025, 23909034, INT_MAX, uint64_t(-1) / 2, uint64_t(-1) / 2 + 100, uint64_t(-1) };
 
 template <typename T>
 static T max_alignment() {
diff -up openjdk/src/hotspot/os/linux/os_linux.cpp.omv~ openjdk/src/hotspot/os/linux/os_linux.cpp
--- openjdk/src/hotspot/os/linux/os_linux.cpp.omv~	2019-01-16 16:59:15.495014288 +0100
+++ openjdk/src/hotspot/os/linux/os_linux.cpp	2019-01-16 16:59:59.483628848 +0100
@@ -2155,7 +2155,7 @@ void os::Linux::print_container_info(out
     }
 
     p = OSContainer::cpu_cpuset_memory_nodes();
-    if (p < 0)
+    if (!p)
       st->print("cpu_memory_nodes() failed\n");
     else {
       st->print("cpu_memory_nodes: %s\n", p);
diff -up openjdk/src/hotspot/os_cpu/linux_arm/linux_arm_32.s.omv~ openjdk/src/hotspot/os_cpu/linux_arm/linux_arm_32.s
--- openjdk/src/hotspot/os_cpu/linux_arm/linux_arm_32.s.omv~	2019-01-18 00:26:19.828171866 +0100
+++ openjdk/src/hotspot/os_cpu/linux_arm/linux_arm_32.s	2019-01-18 00:28:17.943947328 +0100
@@ -91,7 +91,7 @@ dw_f2b_loop_32:
         stmia r0!, {r3 - r9, ip}
         bgt     dw_f2b_loop_32
 dw_f2b_loop_32_finish:
-        addlts  r2, #32
+        addslt  r2, #32
         beq     disjoint_words_finish
         cmp     r2, #16
 	blt	disjoint_words_small
@@ -139,7 +139,7 @@ cw_f2b_loop_32:
         stmia r0!, {r3 - r9, ip}
         bgt     cw_f2b_loop_32
 cw_f2b_loop_32_finish:
-        addlts  r2, #32
+        addslt  r2, #32
         beq     conjoint_words_finish
         cmp     r2, #16
 	blt	conjoint_words_small
@@ -172,7 +172,7 @@ cw_b2f_loop_32:
         stmdb r0!, {r3-r9,ip}
         bgt     cw_b2f_loop_32
 cw_b2f_loop_32_finish:
-        addlts  r2, #32
+        addslt  r2, #32
         beq     conjoint_words_finish
         cmp     r2, #16
 	blt	cw_b2f_copy_small
@@ -224,7 +224,7 @@ cs_f2b_loop_32:
         stmia r0!, {r3 - r9, ip}
         bgt     cs_f2b_loop_32
 cs_f2b_loop_32_finish:
-        addlts  r2, #32
+        addslt  r2, #32
         beq     conjoint_shorts_finish
         movs    r6, r2, lsr #3
         .align 3
@@ -240,11 +240,11 @@ cs_f2b_4:
         beq     conjoint_shorts_finish
         cmp     r2, #4
         ldrh    r3, [r1], #2
-        ldrgeh  r4, [r1], #2
-        ldrgth  r5, [r1], #2
+        ldrhge  r4, [r1], #2
+        ldrhgt  r5, [r1], #2
         strh    r3, [r0], #2
-        strgeh  r4, [r0], #2
-        strgth  r5, [r0], #2
+        strhge  r4, [r0], #2
+        strhgt  r5, [r0], #2
         b       conjoint_shorts_finish
 
 	# Destination not aligned
@@ -302,11 +302,11 @@ cs_f2b_4_u:
         beq     conjoint_shorts_finish
         cmp     r2, #4
         ldrh    r3, [r1], #2
-        ldrgeh  r4, [r1], #2
-        ldrgth  r5, [r1], #2
+        ldrhge  r4, [r1], #2
+        ldrhgt  r5, [r1], #2
         strh    r3, [r0], #2
-        strgeh  r4, [r0], #2
-        strgth  r5, [r0], #2
+        strhge  r4, [r0], #2
+        strhgt  r5, [r0], #2
         b       conjoint_shorts_finish
 
 	# Src and dest overlap, copy in a descending order
@@ -329,7 +329,7 @@ cs_b2f_loop_32:
         stmdb r0!, {r3-r9,ip}
         bgt     cs_b2f_loop_32
 cs_b2f_loop_32_finish:
-        addlts  r2, #32
+        addslt  r2, #32
         beq     conjoint_shorts_finish
         cmp     r2, #24
         blt     cs_b2f_16
@@ -355,11 +355,11 @@ cs_b2f_8:
 cs_b2f_all_copy:
         cmp     r2, #4
         ldrh    r3, [r1, #-2]!
-        ldrgeh  r4, [r1, #-2]!
-        ldrgth  r5, [r1, #-2]!
+        ldrhge  r4, [r1, #-2]!
+        ldrhgt  r5, [r1, #-2]!
         strh    r3, [r0, #-2]!
-        strgeh  r4, [r0, #-2]!
-        strgth  r5, [r0, #-2]!
+        strhge  r4, [r0, #-2]!
+        strhgt  r5, [r0, #-2]!
         b       conjoint_shorts_finish
 
 	# Destination not aligned
@@ -394,7 +394,7 @@ cs_b2f_16_loop_u:
         bgt     cs_b2f_16_loop_u
         beq     conjoint_shorts_finish
 cs_b2f_16_loop_u_finished:
-        addlts  r2, #16
+        addslt  r2, #16
         ldr     r3, [r1]
 	cmp     r2, #10
         blt     cs_b2f_2_u_loop
@@ -457,7 +457,7 @@ cl_f2b_loop_32:
         stmia r0!, {r3 - r9, ip}
         bgt     cl_f2b_loop_32
 cl_f2b_loop_32_finish:
-        addlts  r2, #32
+        addslt  r2, #32
         beq     conjoint_longs_finish
 conjoint_longs_small:
         cmp     r2, #16
@@ -490,7 +490,7 @@ cl_b2f_loop_32:
         stmdb 	r0!, {r3 - r9, ip}
         bgt     cl_b2f_loop_32
 cl_b2f_loop_32_finish:
-        addlts  r2, #32
+        addslt  r2, #32
         beq     conjoint_longs_finish
         cmp     r2, #16
 	blt	cl_b2f_copy_8
diff -up openjdk/src/hotspot/share/utilities/vmError.cpp.omv~ openjdk/src/hotspot/share/utilities/vmError.cpp
--- openjdk/src/hotspot/share/utilities/vmError.cpp.omv~	2019-01-18 01:22:38.376153618 +0100
+++ openjdk/src/hotspot/share/utilities/vmError.cpp	2019-01-18 01:23:06.915573248 +0100
@@ -479,7 +479,7 @@ void VMError::report(outputStream* st, b
 
   STEP("printing type of error")
 
-     switch(_id) {
+     switch(static_cast<unsigned int>(_id)) {
        case OOM_MALLOC_ERROR:
        case OOM_MMAP_ERROR:
          if (_size) {
diff -up openjdk/src/hotspot/os_cpu/linux_arm/os_linux_arm.cpp.omv~ openjdk/src/hotspot/os_cpu/linux_arm/os_linux_arm.cpp
--- openjdk/src/hotspot/os_cpu/linux_arm/os_linux_arm.cpp.omv~	2019-01-18 03:48:34.318704150 +0100
+++ openjdk/src/hotspot/os_cpu/linux_arm/os_linux_arm.cpp	2019-01-18 03:56:14.960801770 +0100
@@ -510,8 +510,8 @@ void os::setup_fpu() {
 #if !defined(__SOFTFP__) && defined(__VFP_FP__)
   // Turn on IEEE-754 compliant VFP mode
   __asm__ volatile (
-    "mov %%r0, #0;"
-    "fmxr fpscr, %%r0"
+    "mov r0, #0;"
+    "fmxr fpscr, r0"
     : /* no output */ : /* no input */ : "r0"
   );
 #endif
diff -up openjdk/src/hotspot/os_cpu/linux_arm/orderAccess_linux_arm.inline.hpp.omv~ openjdk/src/hotspot/os_cpu/linux_arm/orderAccess_linux_arm.inline.hpp
--- openjdk/src/hotspot/os_cpu/linux_arm/orderAccess_linux_arm.inline.hpp.omv~	2019-01-18 03:57:46.981176985 +0100
+++ openjdk/src/hotspot/os_cpu/linux_arm/orderAccess_linux_arm.inline.hpp	2019-01-18 04:05:13.735748748 +0100
@@ -60,7 +60,7 @@ inline static void dmb_sy() {
    if (!os::is_MP()) {
      return;
    }
-#ifdef AARCH64
+#if defined(AARCH64) || defined(__ARM_ARCH_7__) || defined(__ARM_ARCH_7A__) || defined(__ARM_ARCH_7R__) || defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7S__) || defined(__ARM_ARCH_8__) || defined(__ARM_ARCH_8A__)
    __asm__ __volatile__ ("dmb sy" : : : "memory");
 #else
    if (VM_Version::arm_arch() >= 7) {
